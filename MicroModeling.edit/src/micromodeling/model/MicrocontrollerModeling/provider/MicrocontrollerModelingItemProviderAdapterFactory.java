/**
 */
package micromodeling.model.MicrocontrollerModeling.provider;

import java.util.ArrayList;
import java.util.Collection;

import micromodeling.model.MicrocontrollerModeling.util.MicrocontrollerModelingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MicrocontrollerModelingItemProviderAdapterFactory extends MicrocontrollerModelingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MicrocontrollerModelingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Microcontroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicrocontrollerItemProvider microcontrollerItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Microcontroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicrocontrollerAdapter() {
		if (microcontrollerItemProvider == null) {
			microcontrollerItemProvider = new MicrocontrollerItemProvider(this);
		}

		return microcontrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Pin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PinItemProvider pinItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Pin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPinAdapter() {
		if (pinItemProvider == null) {
			pinItemProvider = new PinItemProvider(this);
		}

		return pinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.CLanguage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CLanguageItemProvider cLanguageItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.CLanguage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCLanguageAdapter() {
		if (cLanguageItemProvider == null) {
			cLanguageItemProvider = new CLanguageItemProvider(this);
		}

		return cLanguageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.TimerConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerConfigItemProvider timerConfigItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.TimerConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimerConfigAdapter() {
		if (timerConfigItemProvider == null) {
			timerConfigItemProvider = new TimerConfigItemProvider(this);
		}

		return timerConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Processor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessorItemProvider processorItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Processor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessorAdapter() {
		if (processorItemProvider == null) {
			processorItemProvider = new ProcessorItemProvider(this);
		}

		return processorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.ROM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROMItemProvider romItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.ROM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROMAdapter() {
		if (romItemProvider == null) {
			romItemProvider = new ROMItemProvider(this);
		}

		return romItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.EEPROM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EEPROMItemProvider eepromItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.EEPROM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEEPROMAdapter() {
		if (eepromItemProvider == null) {
			eepromItemProvider = new EEPROMItemProvider(this);
		}

		return eepromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Flash} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlashItemProvider flashItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Flash}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlashAdapter() {
		if (flashItemProvider == null) {
			flashItemProvider = new FlashItemProvider(this);
		}

		return flashItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.RAM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RAMItemProvider ramItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.RAM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRAMAdapter() {
		if (ramItemProvider == null) {
			ramItemProvider = new RAMItemProvider(this);
		}

		return ramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.PinMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PinModeItemProvider pinModeItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.PinMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPinModeAdapter() {
		if (pinModeItemProvider == null) {
			pinModeItemProvider = new PinModeItemProvider(this);
		}

		return pinModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Instruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionItemProvider instructionItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Instruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionAdapter() {
		if (instructionItemProvider == null) {
			instructionItemProvider = new InstructionItemProvider(this);
		}

		return instructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.Register} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegisterItemProvider registerItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.Register}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegisterAdapter() {
		if (registerItemProvider == null) {
			registerItemProvider = new RegisterItemProvider(this);
		}

		return registerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link micromodeling.model.MicrocontrollerModeling.PinOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PinOperationItemProvider pinOperationItemProvider;

	/**
	 * This creates an adapter for a {@link micromodeling.model.MicrocontrollerModeling.PinOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPinOperationAdapter() {
		if (pinOperationItemProvider == null) {
			pinOperationItemProvider = new PinOperationItemProvider(this);
		}

		return pinOperationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (microcontrollerItemProvider != null) microcontrollerItemProvider.dispose();
		if (pinItemProvider != null) pinItemProvider.dispose();
		if (cLanguageItemProvider != null) cLanguageItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (timerConfigItemProvider != null) timerConfigItemProvider.dispose();
		if (processorItemProvider != null) processorItemProvider.dispose();
		if (romItemProvider != null) romItemProvider.dispose();
		if (eepromItemProvider != null) eepromItemProvider.dispose();
		if (flashItemProvider != null) flashItemProvider.dispose();
		if (ramItemProvider != null) ramItemProvider.dispose();
		if (pinModeItemProvider != null) pinModeItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (instructionItemProvider != null) instructionItemProvider.dispose();
		if (registerItemProvider != null) registerItemProvider.dispose();
		if (pinOperationItemProvider != null) pinOperationItemProvider.dispose();
	}

}
