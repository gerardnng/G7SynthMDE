/**
 */
package grafcetmodeling.model.grafcetModeling.provider;

import grafcetmodeling.model.grafcetModeling.util.GrafcetModelingAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GrafcetModelingItemProviderAdapterFactory extends GrafcetModelingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GrafcetModelingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.Grafcet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrafcetItemProvider grafcetItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.Grafcet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGrafcetAdapter() {
		if (grafcetItemProvider == null) {
			grafcetItemProvider = new GrafcetItemProvider(this);
		}

		return grafcetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepItemProvider stepItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepAdapter() {
		if (stepItemProvider == null) {
			stepItemProvider = new StepItemProvider(this);
		}

		return stepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.StepToTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepToTransitionItemProvider stepToTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.StepToTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepToTransitionAdapter() {
		if (stepToTransitionItemProvider == null) {
			stepToTransitionItemProvider = new StepToTransitionItemProvider(this);
		}

		return stepToTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.TransitionToStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionToStepItemProvider transitionToStepItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.TransitionToStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionToStepAdapter() {
		if (transitionToStepItemProvider == null) {
			transitionToStepItemProvider = new TransitionToStepItemProvider(this);
		}

		return transitionToStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.LevelAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LevelActionItemProvider levelActionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.LevelAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLevelActionAdapter() {
		if (levelActionItemProvider == null) {
			levelActionItemProvider = new LevelActionItemProvider(this);
		}

		return levelActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.StoredAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoredActionItemProvider storedActionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.StoredAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoredActionAdapter() {
		if (storedActionItemProvider == null) {
			storedActionItemProvider = new StoredActionItemProvider(this);
		}

		return storedActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.BooleanVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableItemProvider booleanVariableItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.BooleanVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAdapter() {
		if (booleanVariableItemProvider == null) {
			booleanVariableItemProvider = new BooleanVariableItemProvider(this);
		}

		return booleanVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.NumericVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericVariableItemProvider numericVariableItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.NumericVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericVariableAdapter() {
		if (numericVariableItemProvider == null) {
			numericVariableItemProvider = new NumericVariableItemProvider(this);
		}

		return numericVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.TimingOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingOperatorItemProvider timingOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.TimingOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingOperatorAdapter() {
		if (timingOperatorItemProvider == null) {
			timingOperatorItemProvider = new TimingOperatorItemProvider(this);
		}

		return timingOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.LogicalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalOperatorItemProvider logicalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.LogicalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalOperatorAdapter() {
		if (logicalOperatorItemProvider == null) {
			logicalOperatorItemProvider = new LogicalOperatorItemProvider(this);
		}

		return logicalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link grafcetmodeling.model.grafcetModeling.AritmeticOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AritmeticOperatorItemProvider aritmeticOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link grafcetmodeling.model.grafcetModeling.AritmeticOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAritmeticOperatorAdapter() {
		if (aritmeticOperatorItemProvider == null) {
			aritmeticOperatorItemProvider = new AritmeticOperatorItemProvider(this);
		}

		return aritmeticOperatorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (grafcetItemProvider != null) grafcetItemProvider.dispose();
		if (stepItemProvider != null) stepItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (stepToTransitionItemProvider != null) stepToTransitionItemProvider.dispose();
		if (transitionToStepItemProvider != null) transitionToStepItemProvider.dispose();
		if (levelActionItemProvider != null) levelActionItemProvider.dispose();
		if (storedActionItemProvider != null) storedActionItemProvider.dispose();
		if (booleanVariableItemProvider != null) booleanVariableItemProvider.dispose();
		if (numericVariableItemProvider != null) numericVariableItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (timingOperatorItemProvider != null) timingOperatorItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (logicalOperatorItemProvider != null) logicalOperatorItemProvider.dispose();
		if (aritmeticOperatorItemProvider != null) aritmeticOperatorItemProvider.dispose();
	}

}
